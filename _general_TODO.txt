TODO implementa a organización en carpetas con cli e core, e fai un script powershell ou bash en funcion
do S.O. que engada $PYTHONPATH á variablel de entorno cada vez que se abra a carpetas

TODO fai a documentación incluíndo o parser de mermaid e as imaxe que xenere!!

TODO: Documentación general; module docstrings, function docstrings, comments, etc

Definimos unha 'plantilla' para as nosas clases usando unha clase abstracta. A importancia de usar 
clases abstractas é que se as nosas subclases non seguen esa plantilla, Python dará un erro.
Pero as transformacións son aplicadas con funcións, porque son un proceso, non unha estrutura.
A información entra, procésase e se recupera modificada. Por tanto o único motivo que vexo para
pensar en utilizar unha clase abstracta con un só método e aplicala a unha serie de
subclases transformadoras, é:
- 1: Escalabilidade e facilidade de lectura para outros programadores, ademáis de quedar como 
testamento de qué métodos debe implementar calqueira futura clase que pretenda ser un transformador.

- 2: As clases son un mecanismo que permiten ao programador definir os seus propios tipos de datos.
Unha intención explícita de crear obxectos (non funcións, as clases non son contenedores de funcións)
para realizar as transformacións, e NON modificar as cadeas das secuencias orixinais, 
senón crear novos obxectos que procesen e almacenen estas transformacións.
Isto ten un impacto no uso de memoria do programa; crear obxectos que permanecen en memoria
durante a execución ocupa máis memoria que aplicar funcións a obxectos xa existentes...
Se este é o caso, cagueina, porque o meu código implementa funcións que toman unha lista de 
secuencias e *modifican* as cadeas que conteñen, e despois devolven a lista coas cadeas modificadas. 

- 3: se este non é o caso, e é correcto modificar as cadeas das secuencias; entón non sería mellor
simplemente ter unha serie de funcións nun módulo?? Ao que vou é, non sei se remato de entender 
cando temos que decidir usar obxectos e cando funcións, non sei se hai unhas regras xerais de
deseño entorno a isto ou non.
'''