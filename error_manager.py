class ScriptErrorManager:
    '''Stores the required and optional arguments of a script and allows error managing.

    Arguments with a limited set of special values can be included in ``specialValueMap`` as
    key-tuple pairs.
    For example ``{'mode':('remove','replace')}`` will be interpreted as the argument 
    `mode` with it's allowed values being `remove` and `replace`.\n
    Methods expect the use of the module `sys` and of the ``parseArgs()`` function in the ``argsparser`` 
    module, passing the dict generated by ``parseArgs(sys.argv[1:])``.
    All script check methods return ``exit(1)`` if they fail, so ``$?`` and ``$LASTEXITCODE`` will output 1.'''

    def __init__(self, reqArgs : list, optArgs : list, specialValueMap: dict):
        self.reqArgs = reqArgs
        self.optArgs = optArgs
        self.specialValueMap = specialValueMap
        self.argset = set(reqArgs + optArgs)

    @staticmethod
    def general_check(reqArgs : list, optArgs : list, specialValueMap: dict, script_args : dict):
        script_to_check = ScriptErrorManager(reqArgs, optArgs, specialValueMap)
        script_to_check.required_arg_num_check(script_args)
        script_to_check.validate_args(script_args)
        script_to_check.validate_values(script_args)
        
    def validate_values(self, script_args : dict):
        '''Checks for unvalid values for an argument in a script.'''

        for arg in self.specialValueMap.keys():
            if arg in script_args.keys():
                if script_args[arg] not in self.specialValueMap[arg]:
                    raise ValueError(f'Found non-admitted value.\
                                     \nAllowed values for argument are: {self.specialValueMap[arg]}')

    def validate_args(self, script_args : dict):
        '''Checks for unvalid arguments in a script.'''

        assert set(script_args).issubset(self.argset), f'Las palabras del Prof. Oak resuenan en tu cabeza...\n\
            ¡Cada cosa en su momento!\n\
            Argumentos válidos: {self.argset}.'

    def required_arg_num_check(self, script_args : dict):
        '''Checks for correct number of arguments in a script.'''

        num_params = len(list(script_args.keys()))
        if  num_params < len(self.reqArgs) or num_params > len(self.argset):
            missing =  set(self.reqArgs) - set(script_args)
            raise ValueError(
                f'Script calls for at least {len(self.argset)} required parameters.\
                    \nMissing  parameters: {missing}.')